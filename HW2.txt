#include <iostream>
#include <memory>
#include <math.h>

using namespace std;

class node {
public:
	int value;
	shared_ptr<node> right;
	shared_ptr<node> l_child;
	shared_ptr<node> r_child;
	node() {}
	node(int i) { value = i; }

};

class tree {
public:
	shared_ptr<node> root;
	int level;
	tree()
	{
		level = 0;
	}
	tree(int n);
	tree(const tree& T);
	~tree();
	tree(tree&& T); //move constructor


	tree(const initializer_list<int>& V);//The first number in V is tree level;
	//the rest are values from top to bottom and from left to right
	//For example, to create the tree with n=3 in the diagram,
	//tree T1 = {3, 0,1,2,3,4,5,6}; //where the first 3 is tree level, and the rest are values
	void operator= (const tree& R);//L-value operator=
	void operator= (tree&& R); //R-value operator=
	tree ThreeTimes(); //return a tree with all node value being three times
};

tree::tree(int n)
{
	level = n;
	int sum = 0;
	for (int i = 0; i < level; i++)
	{
		sum += (int)pow(2, i);
	}
	for (int i = sum - 1; i >= 0; i--)
	{
		shared_ptr<node>p1 = make_shared<node>(i);
		p1->right = root;
		root = p1;
	}
	shared_ptr<node> p6 = root;
	shared_ptr<node> p7 = root;
	while ((p7->right) != nullptr)
	{
		p6->l_child = p7->right;
		p7 = p7->right;
		p6->r_child = p7->right;
		p7 = p7->right;
		p6 = p6->right;
	}
	p7->right = root;
}

tree::tree(const tree& T)
{
	level = T.level;
	cout << endl;
	shared_ptr<node>p1 = T.root;
	int sum = 0;
	for (int i = 0; i < level; i++)
	{
		sum += (int)pow(2, i);
	}
	int i = 0;
	while (i < sum)
	{
		shared_ptr<node>p2 = make_shared<node>(*p1);
		p2->right = root;
		root = p2;
		p1 = p1->right;
		i++;
	}
	shared_ptr<node>p3 = root;
	shared_ptr<node>p4;
	shared_ptr<node>p5;
	p4 = p3->right;
	while (p4)
	{
		p5 = p4->right;
		p4->right = p3;
		if (p3 == root)
		{
			p3->right = nullptr;
		}
		p3 = p4;
		p4 = p5;
	}
	root = p3;
}


tree::~tree()
{
	shared_ptr<node> p;
	while (root != nullptr)
	{
		p = root->right;
		root.reset();
		root = p;
	}
}

tree::tree(tree&& T)
{
	level = T.level;
	root = T.root;
	T.root = nullptr;
}
tree::tree(const initializer_list<int>& V)
{
	auto it1 = V.end() - 1;


	while (it1 != V.begin())
	{
		shared_ptr<node>p1 = make_shared<node>(*it1);
		//shared_ptr<node>p2 = p1;

		p1->right = root;
		root = p1;
		it1--;

	}
	level = *it1;
	shared_ptr<node> p6 = root;
	shared_ptr<node> p7 = root;
	while ((p7->right) != nullptr)
	{
		p6->l_child = p7->right;
		p7 = p7->right;
		p6->r_child = p7->right;
		p7 = p7->right;
		p6 = p6->right;
	}
	p7->right = root;


}



void tree::operator= (const tree& R)//L-value operator=
{
	level = R.level;
	cout << endl;
	shared_ptr<node>p1 = R.root;

	int sum = 0;
	for (int i = 0; i < level; i++)
	{
		sum += (int)pow(2, i);
	}
	int i = 0;
	while (i < sum)
	{
		shared_ptr<node>p2 = make_shared<node>(*p1);
		p2->right = root;
		root = p2;
		p1 = p1->right;
		i++;
	}
	shared_ptr<node>p3 = root;
	shared_ptr<node>p4;
	shared_ptr<node>p5;
	p4 = p3->right;
	while (p4)
	{
		p5 = p4->right;
		p4->right = p3;
		if (p3 == root)
		{
			p3->right = nullptr;
		}
		p3 = p4;
		p4 = p5;
	}
	root = p3;
	shared_ptr<node> p6 = root;
	shared_ptr<node> p7 = root;
	while ((p7->right) != nullptr)
	{
		p6->l_child = p7->right;
		p7 = p7->right;
		p6->r_child = p7->right;
		p7 = p7->right;
		p6 = p6->right;
	}
	p7->right = root;

}

void tree::operator= (tree&& R)//R-value operator=
{
	level = R.level;
	cout << endl;
	root = R.root;
	R.root = nullptr;
}

tree tree::ThreeTimes()
{
	tree temp;
	temp.level = level;
	cout << endl;
	shared_ptr<node>p1 = root;
	int sum = 0;
	for (int i = 0; i < temp.level; i++)
	{
		sum += (int)pow(2, i);
	}
	int i = 0;
	while (i < sum)
	{
		shared_ptr<node>p2 = make_shared<node>(3 * (p1->value));
		p2->right = temp.root;
		temp.root = p2;
		p1 = p1->right;
		i++;
	}
	shared_ptr<node>p3 = temp.root;
	shared_ptr<node>p4;
	shared_ptr<node>p5;
	p4 = p3->right;
	while (p4)
	{
		p5 = p4->right;
		p4->right = p3;
		if (p3 == temp.root)
		{
			p3->right = nullptr;
		}
		p3 = p4;
		p4 = p5;
	}
	temp.root = p3;
	shared_ptr<node> p6 = temp.root;
	shared_ptr<node> p7 = temp.root;
	while ((p7->right) != nullptr)
	{
		p6->l_child = p7->right;
		p7 = p7->right;
		p6->r_child = p7->right;
		p7 = p7->right;
		p6 = p6->right;
	}
	p7->right = temp.root;
	return temp;
}

ostream& operator<<(ostream& str, const tree& T)
{
	shared_ptr<node> p = T.root;
	if (T.level == 0)
	{
		str << p->value << endl;
		return str;
	}
	int sum = 0;
	for (int i = 0; i < T.level; i++)
	{
		sum += (int)pow(2, i);
	}
	for (int i = 0; i < sum; i++)
	{
		str << p->value << " ";
		p = p->right;
	}
	return str;
}



int main() {

	tree T1(3);
	cout << T1 << endl; //will print 0 1 2 3 4 5 6

	tree T2 = { 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };
	cout << T2 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

	tree T3(T2);
	cout << T3 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

	tree T4;
	T4 = T3;
	cout << T4 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

	T4 = T3.ThreeTimes();
	cout << T4 << endl;//will print 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72

	getchar();
	getchar();
	return 0;
}